-- Table for Locations 
CREATE TABLE Location ( 
	LocationID NUMBER PRIMARY KEY, 
	FloorNumber NUMBER CHECK (FloorNumber >= 0), -- FloorNumber must be non-negative 
	ShelfNumber NUMBER CHECK (ShelfNumber >= 0) -- ShelfNumber must be non-negative 
); 
 
-- Table for Library Resources 
CREATE TABLE LibraryResource ( 
	ResourceID NUMBER PRIMARY KEY, 
	Title VARCHAR2(200), 
	ResourceType VARCHAR2(50), 
	ClassNumber NUMBER, 
	DigitalCopiesAvailable NUMBER CHECK (DigitalCopiesAvailable >= 0), 
	LocationID NUMBER,	 
	LoanPeriod NUMBER CHECK (LoanPeriod >= 0), 
	CONSTRAINT fk_resource_location FOREIGN KEY (LocationID) REFERENCES Location(LocationID) 
); 
 
-- Table for Library Members 
CREATE TABLE LibraryMember ( 
	MemberID NUMBER PRIMARY KEY, 
	Name VARCHAR2(100), 
	MemberType VARCHAR2(50), 
	MaxLoansAllowed NUMBER CHECK (MaxLoansAllowed >= 0), -- MaxLoansAllowed must be non-negative 
	CardIssueDate DATE, 
	CardExpirationDate DATE 
); 
 
-- Table for Reservations 
CREATE TABLE Reservation ( 
	ReservationID NUMBER PRIMARY KEY, 
	ReservationDate DATE, 
	ReservationTime TIMESTAMP, 
	FailureCount NUMBER CHECK (FailureCount >= 0), -- FailureCount must be non-negative 
	NotificationDate DATE, 
	ResourceID NUMBER, 
	MemberID NUMBER, 
	CONSTRAINT fk_reservation_resource FOREIGN KEY (ResourceID) REFERENCES LibraryResource(ResourceID), 
	CONSTRAINT fk_reservation_member FOREIGN KEY (MemberID) REFERENCES LibraryMember(MemberID) 
); 
 
 
-- Table for Loans 
CREATE TABLE Loan ( 
	LoanID NUMBER PRIMARY KEY, 
	ResourceID NUMBER, 
	MemberID NUMBER, 
	LoanDate DATE, 
	ReturnDate DATE, 
	CONSTRAINT fk_loan_resource FOREIGN KEY (ResourceID) REFERENCES LibraryResource(ResourceID), 
	CONSTRAINT fk_loan_member FOREIGN KEY (MemberID) REFERENCES LibraryMember(MemberID) 
); 
 
-- Table for Fines 
CREATE TABLE Fine ( 
	FineID NUMBER PRIMARY KEY, 
	LoanID NUMBER, 
	MemberID NUMBER, 
	FineAmount NUMBER CHECK (FineAmount >= 0), -- FineAmount must be non-negative 
	IsPaid CHAR(1) CHECK (IsPaid IN ('Y', 'N')), -- Only 'Y' or 'N' allowed 
	CONSTRAINT fk_fine_loan FOREIGN KEY (LoanID) REFERENCES Loan(LoanID), 
	CONSTRAINT fk_fine_member FOREIGN KEY (MemberID) REFERENCES LibraryMember(MemberID)  
); 
 
 
 
 
 
--LibraryMember 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (1, 'Alice Smith', 'Student', 5, TO_DATE('2021-09-01', 'YYYY-MM-DD'), TO_DATE('2024-09-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (2, 'John Doe', 'Staff', 10, TO_DATE('2020-05-01', 'YYYY-MM-DD'), TO_DATE('2025-05-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (3, 'Mary Johnson', 'Student', 5, TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2025-01-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (4, 'Grant Permission', 'Staff', 10, TO_DATE('2021-07-01', 'YYYY-MM-DD'), TO_DATE('2026-07-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (5, 'Emma Davis', 'Student', 5, TO_DATE('2022-08-01', 'YYYY-MM-DD'), TO_DATE('2025-08-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (6, 'Robert Lee', 'Staff', 10, TO_DATE('2020-04-01', 'YYYY-MM-DD'), TO_DATE('2023-04-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (7, 'Justin Time', 'Student', 5, TO_DATE('2023-01-01', 'YYYY-MM-DD'), TO_DATE('2026-01-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (8, 'Phil Ter Data', 'Staff', 10, TO_DATE('2022-02-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (9, 'Norm Alized', 'Student', 5, TO_DATE('2021-03-01', 'YYYY-MM-DD'), TO_DATE('2024-03-01', 'YYYY-MM-DD')); 
INSERT INTO LibraryMember (MemberID, Name, MemberType, MaxLoansAllowed, CardIssueDate, CardExpirationDate) 
VALUES (10, 'William Young', 'Staff', 10, TO_DATE('2020-12-01', 'YYYY-MM-DD'), TO_DATE('2023-12-01', 'YYYY-MM-DD')); 
 
--Location 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (101, 1, 1); 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (201, 2, 1); 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (103, 1, 3); 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (104, 1, 4); 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (301, 3, 1); 
INSERT INTO Location (LocationID, FloorNumber, ShelfNumber) 
VALUES (0, 0, 0); 
 
 
 
--Resources 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1001, 'GROUP by Regret, ORDER BY Poor Decisions', 'Book',10,0,101,14); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1002, 'The Very Hungry Caterpillar ', 'Book',11,0,201,14); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1003, 'Principia Mathematica', 'Book',12,0, 103, 0); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1004, 'The Concept of Law', 'eBook',13, 7, 0, 14); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1005, 'The Feynman Lectures on Physics', 'Book',14,0, 104, 3); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1006, 'The Selfish Gene', 'eBook', 15,10,0, 3); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1007, 'Laptop1', 'Laptop', 0,0,301, 0); 
INSERT INTO LibraryResource (ResourceID, Title, ResourceType, ClassNumber, DigitalCopiesAvailable, LocationID, LoanPeriod) 
VALUES (1008, 'The Joy of SQL', 'Book',10,0,101, 0); 
 
 
--Loan 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10001, 1001, 3,TO_DATE('2024-08-01', 'YYYY-MM-DD'), TO_DATE('2024-08-16', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10002, 1002,3, TO_DATE('2024-07-15', 'YYYY-MM-DD'), TO_DATE('2024-07-29', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10003, 1002, 5, TO_DATE('2024-08-05', 'YYYY-MM-DD'), TO_DATE('2024-08-19', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10004, 1002, 6, TO_DATE('2024-09-01', 'YYYY-MM-DD'), TO_DATE('2024-09-15', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10005, 1004,1, TO_DATE('2024-06-10', 'YYYY-MM-DD'), TO_DATE('2024-06-23', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10006, 1001, 3, TO_DATE('2024-05-20', 'YYYY-MM-DD'), TO_DATE('2024-06-02', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10007, 1006, 2, TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-04', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10008, 1004, 2, TO_DATE('2024-08-10', 'YYYY-MM-DD'), TO_DATE('2024-08-24', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10009, 1005, 2, TO_DATE('2024-09-05', 'YYYY-MM-DD'), TO_DATE('2024-09-10', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10010, 1005, 10, TO_DATE('2024-05-25', 'YYYY-MM-DD'), TO_DATE('2024-05-28', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10011,1004,7, TO_DATE('2024-06-15', 'YYYY-MM-DD'), TO_DATE('2024-06-29', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10012, 1004, 7,TO_DATE('2024-07-20', 'YYYY-MM-DD'), TO_DATE('2024-08-03', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10013, 1004, 8,  TO_DATE('2024-08-25', 'YYYY-MM-DD'), TO_DATE('2024-09-08', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10014,1004,3, TO_DATE('2024-11-26', 'YYYY-MM-DD'),  NULL); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10015, 1002,1, TO_DATE('2024-11-20', 'YYYY-MM-DD'),NULL); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10016, 1006, 5, TO_DATE('2024-07-02', 'YYYY-MM-DD'), TO_DATE('2024-07-05', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10017, 1005, 9, TO_DATE('2024-10-02', 'YYYY-MM-DD'), TO_DATE('2024-10-30', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10018, 1001, 8, TO_DATE('2024-11-08', 'YYYY-MM-DD'), TO_DATE('2024-11-16', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10019, 1001, 4, TO_DATE('2024-11-16', 'YYYY-MM-DD'), NULL); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10020, 1005, 4, TO_DATE('2024-10-30', 'YYYY-MM-DD'), TO_DATE('2024-11-02', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10021, 1001, 4, TO_DATE('2024-10-25', 'YYYY-MM-DD'), TO_DATE('2024-11-08', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10022, 1005, 6, TO_DATE('2024-11-02', 'YYYY-MM-DD'), TO_DATE('2024-11-06', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10023, 1005, 2, TO_DATE('2024-11-06', 'YYYY-MM-DD'), TO_DATE('2024-11-10', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10024, 1005, 9, TO_DATE('2024-11-10', 'YYYY-MM-DD'), TO_DATE('2024-11-13', 'YYYY-MM-DD')); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10025, 1004, 6, TO_DATE('2024-11-27', 'YYYY-MM-DD'),NULL); 
INSERT INTO Loan (LoanID, ResourceID, MemberID, LoanDate, ReturnDate) 
VALUES (10026, 1005, 2, TO_DATE('2024-11-22', 'YYYY-MM-DD'),NULL); 
 
 
 
 
 
--Fine 
INSERT INTO Fine (FineID, LoanID, MemberID, FineAmount, IsPaid) 
VALUES (1,10001,3, 1.00, 'Y'); 
INSERT INTO Fine (FineID, LoanID, MemberID, FineAmount, IsPaid) 
VALUES (2,10009,2, 2.00, 'N'); 
INSERT INTO Fine (FineID, LoanID, MemberID, FineAmount, IsPaid) 
VALUES (3,10017,3, 25.00, 'N'); 
INSERT INTO Fine (FineID, LoanID, MemberID, FineAmount, IsPaid) 
VALUES (4,10022,6, 1.00, 'Y'); 
INSERT INTO Fine (FineID, LoanID, MemberID, FineAmount, IsPaid) 
VALUES (5,10023,2, 1.00, 'N'); 
 
--Reservations 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (1, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-01 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 3, TO_DATE('2024-11-09', 'YYYY-MM-DD'), 1005, 7); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (2, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-01 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 0, TO_DATE('2024-11-01', 'YYYY-MM-DD'), 1005, 6); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (3, TO_DATE('2024-11-03', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-03 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, TO_DATE('2024-11-09', 'YYYY-MM-DD'), 1005, 9); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (4, TO_DATE('2024-11-04', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-04 18:27:01', 'YYYY-MM-DD HH24:MI:SS'), 0, TO_DATE('2024-11-05', 'YYYY-MM-DD'), 1005, 2); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (5, TO_DATE('2024-11-27', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-27 19:00:00', 'YYYY-MM-DD HH24:MI:SS'), 0,NULL, 1002, 6); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (6, TO_DATE('2024-11-05', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-05 12:27:16', 'YYYY-MM-DD HH24:MI:SS'), 0, TO_DATE('2024-11-07', 'YYYY-MM-DD'), 1001, 8); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (7, TO_DATE('2024-11-13', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-13 13:31:21', 'YYYY-MM-DD HH24:MI:SS'), 0, TO_DATE('2024-11-16', 'YYYY-MM-DD'), 1001, 4); 
INSERT INTO Reservation (ReservationID, ReservationDate, ReservationTime, FailureCount, NotificationDate, ResourceID, MemberID)  
VALUES (8, TO_DATE('2024-11-22', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-11-22 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 0,NULL, 1001, 3); 
 
 
 
/*  This view provides a summary of all current loans, indicating whether they are overdue. */ 
CREATE OR REPLACE VIEW v_CurrentLoans AS 
SELECT L.LoanID, L.ResourceID,  M.Name AS MemberName, 
L.LoanDate, 
CASE  
WHEN L.ReturnDate IS NULL AND L.LoanDate+R.LoanPeriod < SYSDATE THEN 'Yes'  
ELSE 'No'  
END AS IsOverdue, 
L.LoanDate+R.LoanPeriod as DateToReturn, 
R.title AS ResourceTitle 
FROM  Loan L 
JOIN  LibraryMember M ON L.MemberID = M.MemberID 
JOIN  LibraryResource R ON L.ResourceID = R.ResourceID 
WHERE L.ReturnDate IS NULL; 
 
/* This view summarises the activity of each library member, detailing their current loans, reservations, any outstanding fines and suspension status. */ 
CREATE OR REPLACE VIEW v_MemberActivityOverview AS 
SELECT  M.MemberID,   M.Name, M.MemberType, 
COUNT(DISTINCT vL.LoanID) AS TotalCurrentLoans,  COUNT(DISTINCT R.ReservationID) AS TotalReservations, 
SUM(CASE WHEN F.IsPaid = 'N' THEN F.FineAmount ELSE 0 END) AS CurrentTotalFine, 
CASE WHEN SUM(CASE WHEN F.IsPaid = 'N' THEN F.FineAmount ELSE 0 END) > 10 THEN 'Suspended' ELSE 'Not Suspended' END AS SuspensionStatus, 
MAX(L.LoanDate+Rs.LoanPeriod) AS LatestDueDate,  MAX(R.ReservationDate) AS LatestReservationDate 
FROM   LibraryMember M 
LEFT JOIN  Loan L ON M.MemberID = L.MemberID 
LEFT JOIN  Reservation R ON M.MemberID = R.MemberID 
LEFT JOIN  LibraryResource Rs ON L.ResourceID = Rs.ResourceID   
LEFT JOIN  Fine F ON L.LoanID = F.LoanID 
LEFT JOIN  v_CurrentLoans vL ON L.LoanID = vL.LoanID 
GROUP BY  M.MemberID, M.Name, M.MemberType; 
 
/* This view provides information about all resources, including their availability status and locations. */ 
CREATE OR REPLACE VIEW v_ResourceAvailability AS 
SELECT R.ResourceID,  R.title,  R.ResourceType, R.DigitalCopiesAvailable,R. LocationID, 
CASE WHEN R.ResourceType != 'Book' THEN R.DigitalCopiesAvailable - (SELECT COUNT(*) FROM v_CurrentLoans vL WHERE vL.ResourceID = R.ResourceID)ELSE NULL END AS AvailableCopies,    
CASE WHEN R.ResourceType != 'Book' AND EXISTS (SELECT 1 FROM v_CurrentLoans vL WHERE vL.ResourceID = R.ResourceID GROUP BY vL.ResourceID HAVING COUNT(*) >= R.DigitalCopiesAvailable) THEN 'Not Available' 
WHEN R.ResourceType = 'Book' AND EXISTS (Select 1 FROM v_CurrentLoans vL WHERE vL. ResourceID = R. ResourceID) THEN 'Not Available' 
ELSE 'Available' END AS Availability, 
(SELECT vL.DateToReturn FROM v_CurrentLoans vL WHERE vL.ResourceID = R.ResourceID AND vL.DateToReturn IS NOT NULL FETCH FIRST 1 ROWS ONLY) AS ReturnDate, 
L.FloorNumber,  L.ShelfNumber 
FROM  LibraryResource R 
JOIN Location L ON R.LocationID = L.LocationID 
GROUP BY R.ResourceID, R.Title, R.ResourceType, R.DigitalCopiesAvailable, R.LocationID, L.FloorNumber, L.ShelfNumber; 
 
/*This view shows all outstanding fines owed by members, providing details on what caused the fine.*/ 
CREATE OR REPLACE VIEW v_FinesDue AS 
SELECT   F.FineID,  M.Name AS MemberName, F.LoanID,  F.FineAmount, 
F.IsPaid,  L.LoanDate, L.LoanDate+R.LoanPeriod as DueDate, 
 L.ReturnDate 
FROM Fine F 
JOIN Loan L ON F.LoanID = L.LoanID 
JOIN  LibraryResource R ON L.ResourceID = R.ResourceID 
JOIN  LibraryMember M ON L.MemberID = M.MemberID 
WHERE F.IsPaid = 'N'; 
 
-- Queries 
-- Simple: Retrieve all student member names 
SELECT Name, MemberType  
FROM LibraryMember 
WHERE MemberType = 'Student'; 
 
-- Simple: Find resources with 14-day loan periods: 
SELECT Title, LoanPeriod 
FROM LibraryResource 
WHERE LoanPeriod = 14; 
 
-- Simple: Get titles and locations for books on the first floor 
SELECT R.Title, L.FloorNumber, L.ShelfNumber 
FROM LibraryResource R 
JOIN Location L ON R.LocationID = L.LocationID 
WHERE L.FloorNumber = 1 AND R.ResourceType = 'Book'; 
 
-- Simple: Find members with fines over 5 Pounds 
SELECT M.Name, F.FineAmount 
FROM LibraryMember M 
JOIN Fine F ON M.MemberID = F.MemberID 
WHERE F.FineAmount > 5; 
 
-- Intermediate: List unpaid fine details by member, including member name, fine amount, and loan details 
SELECT M.Name, F.FineAmount, F.LoanID, F.DueDate, F.ReturnDate 
FROM v_FinesDue F 
JOIN LibraryMember M ON F.MemberName = M.Name; 
 
-- Intermediate: Retrieve current loan count and suspension status for all library members 
SELECT M.Name, MA.TotalCurrentLoans, MA.SuspensionStatus 
FROM LibraryMember M 
JOIN v_MemberActivityOverview MA ON M.MemberID = MA.MemberID; 
 
-- Intermediate: List overdue loans including member name, resource title, and return date. 
SELECT M.Name, CL.ResourceTitle, CL.DateToReturn 
FROM v_CurrentLoans CL 
JOIN LibraryMember M ON CL.MemberName = M.Name 
WHERE CL.IsOverdue = 'Yes'; 
 
-- Intermediate: Check resource availability including title, resource type, and availability status. 
SELECT R.Title, R.ResourceType, VA.Availability  
FROM LibraryResource R 
JOIN v_ResourceAvailability VA ON R.ResourceID = VA.ResourceID; 
 
-- Advanced: Retrieve the top 3 most popular library resources based on loan count 
SELECT R.Title, COUNT(L.LoanID) AS TotalLoans 
FROM LibraryResource R 
JOIN Loan L ON R.ResourceID = L.ResourceID 
GROUP BY R.Title 
ORDER BY TotalLoans DESC 
FETCH FIRST 3 ROWS ONLY; 
 
-- Advanced: Calculate total fines generated for each library resource 
SELECT R.Title, SUM(F.FineAmount) AS TotalFines 
FROM LibraryResource R 
JOIN Loan L ON R.ResourceID = L.ResourceID   
JOIN Fine F ON L.LoanID = F.LoanID 
GROUP BY R.Title; 
 
-- Advanced: Summarise member loans and reservations for active members (more than one loan and at least one reservation) 
SELECT M.Name, COUNT(DISTINCT L.LoanID) AS TotalLoans, COUNT(DISTINCT R.ReservationID) AS TotalReservations 
FROM LibraryMember M 
LEFT JOIN Loan L ON M.MemberID = L.MemberID 
LEFT JOIN Reservation R ON M.MemberID = R.MemberID 
GROUP BY M.Name 
HAVING COUNT(DISTINCT L.LoanID) > 1 AND COUNT(DISTINCT R.ReservationID) > 0; 
 
-- Advanced: Analyse detailed member activity: total loans, overdue loans, active reservations, and unpaid fines 
SELECT  
  M.MemberID, M.Name, 
  COUNT(DISTINCT L.LoanID) AS TotalLoans, 
  SUM(CASE WHEN L.ReturnDate IS NULL AND L.LoanDate + R.LoanPeriod < CURRENT_DATE THEN 1 ELSE 0 END) AS OverdueLoans, 
  COUNT(DISTINCT CASE WHEN L.Returndate IS NULL THEN Re.ReservationID END) AS TotalCurrentReservations, 
  SUM(CASE WHEN F.IsPaid = 'N' THEN F.FineAmount ELSE 0 END) AS TotalUnpaidFines 
FROM LibraryMember M 
LEFT JOIN Loan L ON M.MemberID = L.MemberID 
LEFT JOIN LibraryResource R ON L.ResourceID = R.ResourceID 
LEFT JOIN Fine F ON L.LoanID = F.LoanID 
LEFT JOIN Reservation Re ON M.MemberID = Re.MemberID 
GROUP BY M.MemberID, M.Name 
HAVING COUNT(DISTINCT L.LoanID) > 0 OR COUNT(DISTINCT Re.ReservationID) > 0 
ORDER BY TotalUnpaidFines DESC, OverdueLoans DESC; 
 
 

